import matplotlib.pyplot as plt 
import matplotlib.ticker as mticker
from matplotlib import cm, colors
import numpy as np

chain_tick = np.arange(6)
chain_label = [1, 10, 100.0, 1000.0, 10000.0, 100000.0]

block_tick = np.arange(6)
block_label = [1, 2, 4, 8, 16, 32]

data = [np.array([
        [100, 1, 8.20],
        [100, 2, 8.22],
        [100, 4, 9.09],
        [100, 8, 9.14],
        [100, 16, 9.32],
        [100, 32, 9.62],
        [1000, 1, 8.76],
        [1000, 2, 8.86],
        [1000, 4, 9.64],
        [1000, 8, 9.62],
        [1000, 16, 9.81],
        [1000, 32, 9.81],
        [10000, 1, 17.85],
        [10000, 2, 18.02],
        [10000, 4, 18.35],
        [10000, 8, 18.45],
        [10000, 16, 21.70],
        [10000, 32, 23.35],
        [100000, 1, 108.33],
        [100000, 2, 110.96],
        [100000, 4, 120.23],
        [100000, 8, 119.09],
        [100000, 16, 122.52],
        [100000, 32, 123.85]]
    ),
        np.array([
        [100, 1, 18.57],
        [100, 2, 18.5],
        [100, 4, 19.21],
        [100, 8, 19.18],
        [100, 16, 20.85],
        [100, 32, 20.10],
        [1000, 1, 20.97],
        [1000, 2, 21.25],
        [1000, 4, 21.58],
        [1000, 8, 21.61],
        [1000, 16, 22.01],
        [1000, 32, 21.83],
        [10000, 1, 39.00],
        [10000, 2, 40.46],
        [10000, 4, 40.96],
        [10000, 8, 40.52],
        [10000, 16, 40.42],
        [10000, 32, 42.53],
        [100000, 1, 144.09],
        [100000, 2, 144.03],
        [100000, 4, 145.16],
        [100000, 8, 145.52],
        [100000, 16, 145.68],
        [100000, 32, 147.74]]
    ),
        np.array([
        [100, 1, 8.16],
        [100, 2, 8.26],
        [100, 4, 8.66],
        [100, 8, 9.03],
        [100, 16, 9.38],
        [100, 32, 9.78],
        [1000, 1, 8.98],
        [1000, 2, 8.95],
        [1000, 4, 9.35],
        [1000, 8, 9.79],
        [1000, 16, 10.47],
        [1000, 32, 10.52],
        [10000, 1, 19.59],
        [10000, 2, 19.68],
        [10000, 4, 19.91],
        [10000, 8, 20.36],
        [10000, 16, 20.88],
        [10000, 32, 20.24],
        [100000, 1, 111.48],
        [100000, 2, 112.39],
        [100000, 4, 115.22],
        [100000, 8, 114.96],
        [100000, 16, 120.67],
        [100000, 32, 120.14]]
    ),
        np.array([
        [100, 1, 8.20],
        [100, 2, 8.22],
        [100, 4, 9.09],
        [100, 8, 9.14],
        [100, 16, 9.32],
        [100, 32, 9.62],
        [1000, 1, 8.76],
        [1000, 2, 8.86],
        [1000, 4, 9.64],
        [1000, 8, 9.62],
        [1000, 16, 9.81],
        [1000, 32, 9.81],
        [10000, 1, 17.85],
        [10000, 2, 18.02],
        [10000, 4, 18.35],
        [10000, 8, 18.45],
        [10000, 16, 21.70],
        [10000, 32, 23.35],
        [100000, 1, 108.33],
        [100000, 2, 110.96],
        [100000, 4, 122.32],
        [100000, 8, 125.17],
        [100000, 16, 128.31],
        [100000, 32, 128.6]]
    ),
        np.array([
        [100, 1, 8.20],
        [100, 2, 8.22],
        [100, 4, 9.09],
        [100, 8, 9.14],
        [100, 16, 9.32],
        [100, 32, 9.62],
        [1000, 1, 8.76],
        [1000, 2, 8.86],
        [1000, 4, 9.64],
        [1000, 8, 9.62],
        [1000, 16, 9.81],
        [1000, 32, 9.81],
        [10000, 1, 17.85],
        [10000, 2, 18.02],
        [10000, 4, 18.35],
        [10000, 8, 18.45],
        [10000, 16, 21.70],
        [10000, 32, 23.35],
        [100000, 1, 108.33],
        [100000, 2, 110.96],
        [100000, 4, 122.32],
        [100000, 8, 125.17],
        [100000, 16, 128.31],
        [100000, 32, 128.6]]
    ),
        np.array([
        [100, 1, 8.20],
        [100, 2, 8.22],
        [100, 4, 9.09],
        [100, 8, 9.14],
        [100, 16, 9.32],
        [100, 32, 9.62],
        [1000, 1, 8.76],
        [1000, 2, 8.86],
        [1000, 4, 9.64],
        [1000, 8, 9.62],
        [1000, 16, 9.81],
        [1000, 32, 9.81],
        [10000, 1, 17.85],
        [10000, 2, 18.02],
        [10000, 4, 18.35],
        [10000, 8, 18.45],
        [10000, 16, 21.70],
        [10000, 32, 23.35],
        [100000, 1, 108.33],
        [100000, 2, 110.96],
        [100000, 4, 122.32],
        [100000, 8, 125.17],
        [100000, 16, 128.31],
        [100000, 32, 128.6]]
    )]

def log_tick_formatter(val, pos=None):
    return r"$10^{:.0f}$".format(val)

fig = plt.figure(figsize=(18, 9), dpi=300)
grid = fig.add_gridspec(2, 3)

ax = []
surf = []
counter = 0
for i in range(0,2):
    for j in range(0,3):
        x = data[counter][:,1]
        y = data[counter][:,0]
        z = data[counter][:,2]

        ax.append(fig.add_subplot(grid[i, j], projection='3d'))
        surf.append(ax[counter].plot_trisurf(np.log2(x), np.log10(y), z, cmap=cm.get_cmap('cividis', 20), vmin=0, vmax=200))
        ax[counter].view_init(20, -50)
    
        # Axis formatting
        plt.xticks(block_tick, block_label)
        plt.yticks(chain_tick, chain_label)
        plt.ylim(2, 5)
        plt.rc('axes', labelsize=8)  
        ax[counter].yaxis.set_major_formatter(mticker.FuncFormatter(log_tick_formatter))
        
        ax[counter].set_xlabel('block size (KB)', fontsize=10)
        ax[counter].set_ylabel('chain length (blocks)', fontsize=10)
        ax[counter].set_zlabel('processing time (ms)', fontsize=10)

        counter+=1

plt.subplots_adjust(wspace=0, hspace=0.05)
cb = fig.colorbar(surf[1], ax=(ax[0], ax[1], ax[2], ax[3], ax[4], ax[5]), orientation='vertical', fraction=0.06, pad=0.06)

plt.savefig('process.png', bbox_inches='tight')
